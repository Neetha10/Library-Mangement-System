const express = require('express');
const router = express.Router();
const db = require('../config/database');
const admin = require('../config/firebase-admin');

// üîê Middleware
async function verifyToken(req, res, next) {
  const token = req.headers.authorization?.split(' ')[1];
  if (!token) return res.status(401).json({ error: 'Missing token' });

  try {
    const decoded = await admin.auth().verifyIdToken(token);
    req.user = decoded;
    next();
  } catch (err) {
    return res.status(403).json({ error: 'Invalid token' });
  }
}

// ‚úÖ POST /api/rentals ‚Üí Borrow book
router.post('/', verifyToken, async (req, res) => {
  const { copyId } = req.body;
  const email = req.user.email;

  try {
    const [customerRows] = await db.execute(
      `SELECT CUSTOMER_ID FROM NSH_CUSTOMER WHERE EMAIL_ADDRESS = ?`,
      [email]
    );

    const customer = customerRows[0];
    if (!customer) {
      return res.status(404).json({ message: "Customer not found" });
    }

    const customerId = customer.CUSTOMER_ID;

    const [rentalIdResult] = await db.execute(
      `SELECT IFNULL(MAX(RENTAL_SERVICE_ID), 0) + 1 AS NEXT_ID FROM NSH_RENTAL_SERVICE`
    );
    const rentalId = rentalIdResult[0].NEXT_ID;

    await db.execute(
      `INSERT INTO NSH_RENTAL_SERVICE (
         RENTAL_SERVICE_ID, CUSTOMER_ID, COPY_ID, RENTAL_STATUS,
         BORROWED_DATE, EXPECTED_RETURN_DATE
       ) VALUES (?, ?, ?, 'Borrowed', CURDATE(), DATE_ADD(CURDATE(), INTERVAL 7 DAY))`,
      [rentalId, customerId, copyId]
    );

    res.status(201).json({ message: '‚úÖ Book borrowed successfully!' });

  } catch (err) {
    console.error('‚ùå Rental insert failed:', err.message);
    res.status(500).json({ error: err.message });
  }
});

// ‚úÖ GET /api/rentals/my ‚Üí View my borrowed books
router.get('/my', verifyToken, async (req, res) => {
  const email = req.user.email;

  try {
    const [customerRows] = await db.execute(
      `SELECT CUSTOMER_ID FROM NSH_CUSTOMER WHERE EMAIL_ADDRESS = ?`,
      [email]
    );

    const customer = customerRows[0];
    if (!customer) {
      return res.status(404).json({ message: "Customer not found" });
    }

    const customerId = customer.CUSTOMER_ID;

    const [borrowedRows] = await db.execute(
      `SELECT RENTAL_SERVICE_ID, COPY_ID, RENTAL_STATUS, BORROWED_DATE, EXPECTED_RETURN_DATE
       FROM NSH_RENTAL_SERVICE
       WHERE CUSTOMER_ID = ?
       ORDER BY BORROWED_DATE DESC`,
      [customerId]
    );

    res.status(200).json(borrowedRows || []);
  } catch (err) {
    console.error('‚ùå Failed to fetch borrowed books:', err.message);
    res.status(500).json({ message: "Server error" });
  }
});

// ‚úÖ PUT /api/rentals/return/:id ‚Üí Return book
router.put('/return/:id', verifyToken, async (req, res) => {
  const rentalServiceId = req.params.id;

  try {
    await db.execute(
      `UPDATE NSH_RENTAL_SERVICE
       SET RENTAL_STATUS = 'Returned', RETURN_DATE = CURDATE()
       WHERE RENTAL_SERVICE_ID = ?`,
      [rentalServiceId]
    );

    console.log("‚úÖ Book returned successfully:", rentalServiceId);
    res.status(200).json({ message: "‚úÖ Book returned successfully! Invoice will be generated by trigger." });

    // ‚ö° Your database trigger will auto-create the invoice.

  } catch (err) {
    console.error('‚ùå Failed to return book:', err.message);
    res.status(500).json({ message: "Failed to return book" });
  }
});

module.exports = router;
